version: "3"

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: architecture_tool_django_local_django
    container_name: django
    depends_on:
      - postgres
      - mailhog
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
      - ./.envs/.local/.project
    ports:
      - "8000:8000"
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: architecture_tool_django_production_postgres
    container_name: postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.postgres
    ports:
      - "5432:5432"

  docs:
    image: architecture_tool_django_local_docs
    container_name: docs
    build:
      context: .
      dockerfile: ./compose/local/docs/Dockerfile
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.project
    volumes:
      - ./docs:/docs:z
      - ./config:/app/config:z
      - ./architecture_tool_django:/app/architecture_tool_django:z
      - ./CHANGELOG.rst:/app/CHANGELOG.rst:z
      - /app/architecture_tool_django/media  # ignore folder in the volume
    ports:
      - "7000:7000"

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    ports:
      - "8025:8025"

  redis:
    image: redis:5.0
    container_name: redis

  celeryworker:
    <<: *django
    image: architecture_tool_django_local_celeryworker
    container_name: celeryworker
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: architecture_tool_django_local_celerybeat
    container_name: celerybeat
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    image: architecture_tool_django_local_flower
    container_name: flower
    ports:
      - "5555:5555"
    command: /start-flower

  plantuml-server:
    # build:
    #   context: .
    #   dockerfile: Dockerfile.jetty
    #   args:
    #     BASE_URL: plantuml
    image: plantuml/plantuml-server:tomcat-v1.2020.8
    container_name: plantuml
    environment:
      - ALLOW_PLANTUML_INCLUDE=true
      - JBP_CONFIG_TOMCAT="{tomcat:{context_path:/plantuml}}"
    ports:
      - 8080:8080

  minio:
    image: minio/minio:RELEASE.2020-11-25T22-36-25Z
    container_name: minio
    # volumes:
    #   - /pkg:/data
    ports:
      - "9000:9000"
    restart: always
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc:RELEASE.2020-11-25T23-04-07Z
    container_name: createbuckets
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minio minio123 --api S3v4;
      /usr/bin/mc mb myminio/mybucket;
      /usr/bin/mc ls myminio;
      exit 0;
      "
